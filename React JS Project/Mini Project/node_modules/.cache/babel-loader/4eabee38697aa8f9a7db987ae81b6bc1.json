{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\practice\\\\React JS Project\\\\Mini Project\\\\src\\\\UseState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nfunction UseState({\n  text,\n  maxLength\n}) {\n  _s();\n\n  const [hidden, setidden] = useState(true); // If the text is short enough, just render it\n\n  if (text.length <= maxLength) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  } // Render the text (shortened or full-length) followed by\n  // a link to expand/collapse it.\n  // When a link is clicked, update the value of `hidden`,\n  // which will trigger a re-render\n\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [hidden ? `${text.substr(0, maxLength).trim()} ...` : text, hidden ? /*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: () => setHidden(false),\n      children: \" read more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: () => setHidden(true),\n      children: \" read less\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UseState, \"VovDlHiZtSEhKDi3LEydeew3Z8w=\");\n\n_c = UseState;\nexport default UseState;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseState\");","map":{"version":3,"sources":["C:/Users/User/Desktop/practice/React JS Project/Mini Project/src/UseState.js"],"names":["React","useState","UseState","text","maxLength","hidden","setidden","length","substr","trim","setHidden"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAGA,SAASC,QAAT,CAAkB;AAACC,EAAAA,IAAD;AAAMC,EAAAA;AAAN,CAAlB,EAAoC;AAAA;;AAChC,QAAM,CAACC,MAAD,EAASC,QAAT,IAAqBL,QAAQ,CAAC,IAAD,CAAnC,CADgC,CAGlC;;AACA,MAAIE,IAAI,CAACI,MAAL,IAAeH,SAAnB,EAA8B;AAC5B,wBAAO;AAAA,gBAAOD;AAAP;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GANiC,CAQlC;AACA;AACA;AACA;;;AACA,sBACE;AAAA,eACGE,MAAM,GAAI,GAAEF,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAeJ,SAAf,EAA0BK,IAA1B,EAAiC,MAAvC,GAA+CN,IADxD,EAEGE,MAAM,gBACL;AAAG,MAAA,OAAO,EAAE,MAAMK,SAAS,CAAC,KAAD,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,gBAGL;AAAG,MAAA,OAAO,EAAE,MAAMA,SAAS,CAAC,IAAD,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAtBQR,Q;;KAAAA,Q;AAuBT,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nfunction UseState({text,maxLength}) {\r\n    const [hidden, setidden] = useState(true);\r\n    \r\n  // If the text is short enough, just render it\r\n  if (text.length <= maxLength) {\r\n    return <span>{text}</span>;\r\n  }\r\n\r\n  // Render the text (shortened or full-length) followed by\r\n  // a link to expand/collapse it.\r\n  // When a link is clicked, update the value of `hidden`,\r\n  // which will trigger a re-render\r\n  return (\r\n    <span>\r\n      {hidden ? `${text.substr(0, maxLength).trim()} ...` : text}\r\n      {hidden ? (\r\n        <a onClick={() => setHidden(false)}> read more</a>\r\n      ) : (\r\n        <a onClick={() => setHidden(true)}> read less</a>\r\n      )}\r\n    </span>\r\n  );\r\n}\r\nexport default UseState\r\n"]},"metadata":{},"sourceType":"module"}